component {

	/**
	* I initialize the CSV file proxy with the given filename and headers.
	*/
	public void function init(
		required string filename,
		required array headers
		) {

		variables.filename = arguments.filename;
		variables.headers = arguments.headers;
		// Todo: inject rather than grab from global scope. I'm being lazy.
		variables.teamName = application.properties.team.name;
		variables.siteName = application.properties.site.name;

	}

	// ---
	// PUBLIC METHODS.
	// ---

	/**
	* I read the file contents from the given directory if the file exists.
	*/
	public array function read( required string directoryPath ) {

		var filePath = "#directoryPath#/#filename#";

		if ( ! fileExists( filePath ) ) {

			return [];

		}

		return csvRead(
			filePath,
			"arrayOfStruct",
			{
				skipHeaderRecord: true,
				ignoreHeaderCase: true,
				header: headers,
				commentMarker: "##",
				encoding: "utf-8",
			}
		);

	}


	/**
	* I write the records to the CSV file.
	*/
	public void function write(
		required string directoryPath,
		required array records
		) {

		var filePath = "#directoryPath#/#filename#";

		// Adobe ColdFusion 2025 BUG: I'm mapping the array-of-struct to an array-of-array
		// format due to a bug in the CSV write implementation which appears to depend on
		// the iteration order of the struct keys, which ends up corrupting the CSV data
		// depending on how the structs are defined. By mapping from the headers array, I
		// can guarantee the order regardless of the struct type.
		csvWrite(
			records.map(
				( record ) => {

					// Map header collection to row collection.
					return headers.map( ( key ) => ( record[ key ] ?? "" ) );

				}
			),
			"arrayOfCFArray",
			filePath,
			{
				skipHeaderRecord: false,
				commentMarker: "##",
				headerComments: [
					"",
					"Generated by Adobe ColdFusion 2025.",
					"Hackathon Team: #teamName#",
					"Demo Site: #siteName#",
					"",
				],
				header: headers,
				encoding: "utf-8",
			}
		);

	}

}
